31/01/2020

ESP-01, ESP2866.

Enlaces: 
https://www.instructables.com/Getting-Started-With-the-ESP8266-ESP-01/
https://medium.com/@aallan/getting-started-with-the-esp8266-270e30feb4d1

https://sub.nanona.fi/esp8266/index.html

https://github.com/espressif/ESP8266_NONOS_SDK

https://hackaday.com/2015/03/18/how-to-directly-program-an-inexpensive-esp8266-wifi-module/

Esp-idf is the sdk
Msys2 is the environment
Xtensa-esp32-elf is the toolchain

ESP01 -> FCC compliant module

RST -> Vcc
CHPD -> Vcc

CH340 vs CP2102

Putty: 115200

Importante usar ctrl+m, ctrl+j.


Hace echo.

AT+GMR (en mayúsculas) ctrl+m ctrl+j
AT version:1.3.0.0(Jul 14 2016 18:54:01)
SDK version:2.0.0(5a875ba)
v1.0.0.3
Mar 13 2018 09:35:47


// Modo cliente
AT+CWMODE=1

OK

// Listar access points

AT+CWLAP
+CWLAP:(3,"MOVISTAR_BC04",-60,"1c:b0:44:ce:bc:05",1,25,0)
+CWLAP:(3,"MiFibra-0AC0",-83,"78:dd:12:02:0a:c2",1,25,0)
+CWLAP:(3,"Orange-C23C",-71,"e4:3e:d7:3a:c2:3e",1,28,0)
+CWLAP:(3,"MiFibra-11F9",-81,"52:fe:3b:ae:11:f9",1,25,0)
+CWLAP:(3,"MiFibra-D96A",-82,"78:dd:12:a9:d9:6c",1,30,0)
+CWLAP:(4,"DIGIFIBRA-6Sde",-70,"44:fb:5a:bc:bb:64",2,35,0)
+CWLAP:(3,"Chateau de Fuenki",-70,"78:81:02:80:4d:39",6,43,0)
+CWLAP:(3,"MiFibra-E120",-70,"94:6a:b0:1c:e1:22",6,23,0)
+CWLAP:(3,"MOVISTAR_684F",-76,"98:97:d1:a5:68:50",6,65,0)
+CWLAP:(3,"MOVISTAR_F537",-86,"78:29:ed:fd:f5:38",6,25,0)
+CWLAP:(3,"AsesoriaAlfil",-70,"cc:ed:dc:0a:20:2f",6,35,0)
+CWLAP:(3,"MiFibra-CD6E",-74,"78:dd:12:29:cd:70",6,25,0)
+CWLAP:(4,"MIWIFI_2G_PRzP",-77,"24:d3:f2:e0:fe:92",6,43,0)
+CWLAP:(4,"MIWIFI_2G_JnDh",-65,"e4:ca:12:e2:62:0f",11,30,0)
+CWLAP:(3,"wifi abierta",-45,"44:ad:b1:cb:ee:2e",11,33,0)
+CWLAP:(3,"vodafone8130",-77,"d4:60:e3:88:81:31",11,40,0)
+CWLAP:(3,"COCO",-74,"98:97:d1:ab:82:e4",11,70,0)
+CWLAP:(3,"ONO-MJ",-84,"ec:f4:51:6b:89:9b",11,23,0)
+CWLAP:(3,"MIGUEL",-81,"d8:fb:5e:25:ef:77",1,26,0)


// Conectarse a la wifi

AT+CWJAP="wifi abierta","password"
WIFI CONNECTED
WIFI GOT IP

OK

// Información sobre si estamos conectados

AT+CIFSR
+CIFSR:STAIP,"192.168.1.131"
+CIFSR:STAMAC,"cc:50:e3:5d:6b:a7"

OK

// Iniciar servidor

OK
AT+CIPMUX=1

OK
AT+CIPSERVER=1,80

OK

// Conectarse desde el PC a http://192.168.1.131:80/
// recibimos la conexión

0,CONNECT

+IPD,0,425:GET / HTTP/1.1
Host: 192.168.1.131
Connection: keep-alive
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/5
37.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9
,image/avif,image/webp,image/apng,*/*;q=0.8,application/signe
d-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: es-ES,es;q=0.9



Reset
----------

AT+RST

OK

ets Jan  8 2013,rst cause:2, boot mode:(3,6)

load 0x40100000, len 2408, room 16
tail 8
chksum 0xe5
load 0x3ffe8000, len 776, room 0
tail 8
chksum 0x84
load 0x3ffe8310, len 632, room 0
tail 8
chksum 0xd8
csum 0xd8

2nd boot version : 1.6
SPI Speed      : 40MHz
SPI Mode       : QIO
SPI Flash Size & Map: 8Mbit(512KB+512KB)
jump to run user1 @ 1000

2 N | r  n|      l`   r l d     d    r $ l2    l`   r l | 
ll  rl  r$   cB   b # br    {   c  n  2oN     d    d    | 74880 baudios
l  ll  l     l    n     bc l $   c      B" l  # rlrd    | 
ready
WIFI CONNECTED
WIFI GOT IP


------------------------------------

Logs del arranque (hay que poner 74880 bauds):


     ets Jan  8 2013,rst cause:2, boot mode:(3,7)
    
    load 0x40100000, len 2408, room 16 
    tail 8
    chksum 0xe5
    load 0x3ffe8000, len 776, room 0 
    tail 8
    chksum 0x84
    load 0x3ffe8310, len 632, room 0 
    tail 8
    chksum 0xd8
    csum 0xd8
    
    2nd boot version : 1.6
      SPI Speed      : 40MHz
      SPI Mode       : QIO
      SPI Flash Size & Map: 8Mbit(512KB+512KB)
    jump to run user1 @ 1000
    
    rf cal sector: 249
    rf[112] : 00
    rf[113] : 00
    rf[114] : 01
    
    SDK ver: 2.0.0(5a875ba) compiled @ Aug  9 2016 15:12:27
    phy ver: 1055, pp ver: 10.2



-----------------------

Instalar esptool:
repo oficial: https://github.com/espressif/esptool
>pip install esptool


(reset con GPIO0 pulsado)

C:\>esptool.py chip_id
esptool.py v2.8
Found 1 serial ports
Serial port COM3
Connecting....
Detecting chip type... ESP8266
Chip is ESP8266EX
Features: WiFi
Crystal is 26MHz
MAC: cc:50:e3:5d:6a:90
Uploading stub...
Running stub...
Stub running...
Chip ID: 0x005d6a90
Hard resetting via RTS pin...


PS D:\tmp\esp8266> esptool.py flash_id
esptool.py v2.8
Found 1 serial ports
Serial port COM3
Connecting........_
Detecting chip type... ESP8266
Chip is ESP8266EX
Features: WiFi
Crystal is 26MHz
MAC: cc:50:e3:5d:6a:90
Uploading stub...
Running stub...
Stub running...
Manufacturer: 85
Device: 6014
Detected flash size: 1MB
Hard resetting via RTS pin...


Copia de seguridad del contenido de la flash

esptool.py --baud 115200 read_flash 0x00000 0x100000 backup.img

--------------------------------

Instalar platform IO. Extensión de vscode.

Dos SDK, una con RTOS y otra sin él (nonos). Con ESP32 sólo está la RTOS. La nonos podría quedar sin soporte.
https://github.com/espressif/ESP8266_NONOS_SDK/issues/229

    Support Policy for ESP8266 NonOS (Starting from December 2019)
    
    - We will not add any new features to the ESP8266 NonOS SDK.
    - We will only fix critical bugs in the ESP8266 NonOS SDK.
	...
    - It is suggested that the ESP8266_RTOS_SDK, instead of ESP8266 NonOS SDK, be used for your projects.



Ir a import example proyect.
Al compilar seleccionar la placa correspondiente, o crear las opciones en .platformio:
[env:esp01_1m]
platform = espressif8266
    board = esp01_1m
    framework = esp8266-nonos-sdk
    monitor_speed = 74880
    build_flags = -I include



La SDK necesita fichero user_config.h

El linker necesita dos funciones más:
(.irom0.text+0x748): undefined reference to `user_init'
(.irom0.text+0x8e7): undefined reference to `user_rf_cal_sector_set'



La versión de la SDK para ESP8266 que viene con PlatformIO parece ser muy antigua.


----------------------------
android-a2bdf5:/cygdrive/d/tmp/esp$ 
git clone --recursive https://github.com/espressif/ESP8266_RTOS_SDK.git

IDF_PATH=/cygdrive/d/tmp/esp/ESP8266_RTOS_SDK

----------------------

Seguir estas instrucciones:

https://docs.espressif.com/projects/esp8266-rtos-sdk/en/latest/get-started/windows-setup.html

En cygwin:

export IDF_PATH=/home/Reinoso/esp/ESP8266_RTOS_SDK
. ${IDF_PATH}/add_path.sh


Copiar la toolchain xtensa-lx106-elf a /opt y añadir su ruta en el $PATH

Falla el linker:

LD build/hello-world.elf
d:/tmp/esp/msys32/opt/xtensa-lx106-elf/bin/../lib/gcc/xtensa-lx106-elf/5.2.0/../../../../xtensa-lx106-elf/bin/ld.exe: cannot find -lc_nano
collect2.exe: error: ld returned 1 exit status
make: *** [/home/Reinoso/esp/ESP8266_RTOS_SDK/make/project.mk:510: /home/Reinoso/esp/hello_world/build/hello-world.elf] Error 1

cambio en sdkconfig:
CONFIG_NEWLIB_NANO_FORMAT=y
por
CONFIG_NEWLIB_NANO_FORMAT=n

make // Compila
make flash // Flashea bien
make monitor // leer del puerto serie


Para VSC:

Ajusto los includes, crear configuración en .vscode\c_cpp_properties.json


    {
        "configurations": [
            {
                "name": "esp",
                "includePath": [
                    "${default}",
                    "${workspaceFolder}/build/include",
                    "D:/tmp/esp/msys32/opt/xtensa-lx106-elf/**",
                    "${workspaceFolder}/../../ESP8266_RTOS_SDK/components/**",
                    "${workspaceFolder}/../../ESP8266_RTOS_SDK/components/freertos/port/esp8266/include"
                ],
                "defines": [
                    "_DEBUG",
                    "UNICODE",
                    "_UNICODE"
                ],
                "intelliSenseMode": "gcc-x64"
            }
        ],
        "version": 4
    }


ssh-keygen // crear clave para git


vscode reconoce las rutas con / además de con \

Ruta del repo github:

    D:\tmp\esp\msys32\home\Reinoso\esp\esp8266-learning

Crear directorio led_on_of-espidf
Copiar ejemplo de examples/get-started/hello_world
Iniciar el bash de sys32: /usr/bin/bash -l
Make menuconfig:
- cambiar puerto serie a COM3.
- bootloader log level a debug
- Enable FreeRTOS trace facility: marcar
- Enable 'nano' formatting options for printf/scanf family: desmarcar
Se crea el directorio build y el fichero sdkconfig.

Falla por la libc_nano.

Añadir CONFIG_NEWLIB_NANO_FORMAT=n a sdkconfig.

------------

Intento compilar blinking, da error:


.flash.rodata len 0x03f38 load 0x4021cb88

A fatal error occurred: Segment loaded at 0x4021cb88 lands in same 64KB flash mapping as segment loaded at 0x40210010. Can't generate binary. Suggest changing linker script or ELF to merge sections.
make: *** [/home/Reinoso/esp/ESP8266_RTOS_SDK/components/esptool_py/Makefile.projbuild:72: /home/Reinoso/esp/esp8266-learning/led_on_off-espidf/build/led_on_off.bin] Error 2


Clean: no funciona,
Borrar build: no funciona
Vuelvo a copiar el hello_world. Compila bien. Borro línea por línea. Descubro que salta cuando comento la linea esp_restart() al final de la función.

Ya compila
-------------

Intento flashear, da error:

File  md5: ec1233aaaac6b417c667f1a553d17075
Flash md5: a2ffd22a178c52fc698c870a7d5e84ce
MD5 of 0xFF is 5c39cf28d16ad4781c8dc169e42de7c0

A fatal error occurred: MD5 of file does not match data in flash!


Intento corregirlo: Vuelve a salir el error de "Can't generate binary.".

-------------

Este bucle, con el while no compila, pero con el for sí.

    for (int i = 10; i >= 0; i--) {
    //while(true) {
        printf("Restarting in gfrss seconds...\n");
        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }


------------

Instalo entorno de cero.

Instrucciones de: https://docs.espressif.com/projects/esp8266-rtos-sdk/en/latest/

Compilo. Da el mismo error por la libnano.

------------

Me bajo versión estable, release de:
    https://github.com/espressif/ESP8266_RTOS_SDK/releases/tag/v3.3


La copio en lugar de la bajada de github.
Borro el directorio hello world. Copio el ejemplo.
En el makeconfig cambio el puerto serie y el tamaño de la flash a 1Mb.

Hello world compila sin errores.

Flash y monitor funcionan.

Hago el cambio de for por el while: compila sin problemas.

Corregir rutas en .bashrc para poder compilar desde terminal:
    export PATH="/mingw32/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin:/c/Windows/System32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0/:/opt/xtensa-esp32-elf/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl"
    export PATH="$PATH:$HOME/esp/xtensa-lx106-elf/bin"
    export IDF_PATH="$HOME/esp/ESP8266_RTOS_SDK"

Ya compila. El delay lo hace bien. Lo veo por el puerto serie. Pero el led no se enciende.

Veo ejemplo: https://github.com/espressif/ESP8266_RTOS_SDK/blob/master/examples/peripherals/spi_oled/main/spi_oled_example_main.c


------

Consume 17ma, tanto con el led encendido, como apagado, como en bootloader.

¿Qué pasa cuando se acaba la rutina app_main? ¿se resetea o entra en sleep?

------

Al activar power management, y desactivar bootloader initi spi, ha dejado de responder el bootloader.

Ha vuelto al responder tras tenerlo un tiempo desconectado y borrar la flash usando esptool

---------

Describe el protocolo que usa esptool para hablar con el chip.

https://github.com/espressif/esptool/wiki/Serial-Protocol

--------------
Dice el datasheet (technical reference):

The baud rate of the printed information is relevant to the frequency of the external crystal oscillator. If the
frequency of the crystal oscillator is 40 MHz, then the baud rate for printing is 115200; if the frequency of the
crystal oscillator is 26 MHz, then the baud rate for printing is 74880. 



--------------------

Enviar paquetes 802.11 arbitrarios: https://github.com/Jeija/esp32-80211-tx

--------------------

Flashing binaries to serial port COM3 (app at offset 0x10000)...
esptool.py v2.4.0
Connecting....
Chip is ESP8266EX
Features: WiFi
MAC: cc:50:e3:5d:6a:90
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 921600
Changed.
Configuring flash size...
Compressed 7312 bytes to 5235...
Wrote 7312 bytes (5235 compressed) at 0x00000000 in 0.1 seconds (effective 769.2 kbit/s)...
Hash of data verified.
Compressed 130848 bytes to 89808...
Wrote 130848 bytes (89808 compressed) at 0x00010000 in 6.6 seconds (effective 159.0 kbit/s)...
File  md5: df979450ddf5ef919f03f54a9cd495bb
Flash md5: 97c72b44bffbfdbb1efa4a18593a2d87
MD5 of 0xFF is d1fb50b48381cf683810ae15246f9f37

A fatal error occurred: MD5 of file does not match data in flash!
make: *** [/home/Reinoso/esp/ESP8266_RTOS_SDK/components/esptool_py/Makefile.projbuild:76: flash] Error 2



No es defecto del chip. Lo causa la toolchain. Cambiando algunas líneas del programa se arregla.

En el mismo programa, si se añade la línea 

    ESP_LOGI(LOG_TAG, "Init done");

ya no sucede.

--------------------------------

I2C:

El I2C es por software y se hace con una lista enlazada.

Primero se llama a `i2c_driver_install` indicando el número de puerto I2C_NUM. Así se asocia la configuración de pines.

static esp_err_t i2c_init() {
    i2c_config_t conf;
    conf.mode = I2C_MODE_MASTER;
    conf.sda_io_num = I2C_SDA_IO;
    conf.sda_pullup_en = 1;
    conf.scl_io_num = I2C_SCL_IO;
    conf.scl_pullup_en = 1;
    conf.clk_stretch_tick = 1; // probar
	
    ESP_ERROR_CHECK(i2c_driver_install(I2C_NUM, conf.mode));
    ESP_ERROR_CHECK(i2c_param_config(I2C_NUM, &conf));
    return ESP_OK;
}


Módulo PCF8591, address 0x48

I2C scan:

Si el dispositivo no contesta, el puerto i2c queda ocupado porque i2c_master_cmd_begin falla al no recibir el ACK y ya no procesa el comando stop.

Hay que llamarlo explícitamente.

En el analizador lógico se ve hueco en el 0x91 mientras escribe el mensaje por puerto serie. ¿Se podría hacer a la vez poniéndolo en una cola de RTOS?
 Write: 0x90
 Read: 0x91

----------------------

Por GPIO2 parece que sale la misma información que por la UART durante el arranque a 74880 bauds.
En GPIO0 hay datos a una frecuencia mayor (aprox 8MHz) pero no he podido determinar qué es.


----------------------

/* Hardware random number generator register */ 
#define WDEV_RND_REG 0x60035144


--------------------

El ESP8266 no tiene contadores hardware para hacer un frecuencímetro. El esp32 sí.
Tiene un generador de números aleatorios hardware. Registro WDEV_RND_REG 0x60035144

 Tensilica Xtensa Diamond Standard 106Micro
 
 https://ip.cadence.com/uploads/902/TIP_What_Why_How_Cust_Processors_WP_V3_FINAL-pdf


-------------------

 .text          0x401009fc       0x20 D:/tmp/esp/msys32/home/Reinoso/esp/ESP8266_RTOS_SDK/components/esp8266/lib\libhal.a(clock.o)
                0x401009fc                xthal_get_ccount
                0x40100a04                xthal_set_ccompare
                0x40100a10                xthal_get_ccompare


    $ ~/esp/xtensa-lx106-elf/bin/xtensa-lx106-elf-ar.exe x D:/tmp/esp/msys32/home/Reinoso/esp/ESP8266_RTOS_SDK/components/esp8266/lib/libhal.a
 
Desensamblado:

    $ ~/esp/xtensa-lx106-elf/bin/xtensa-lx106-elf-objdump.exe -d clock.o
    Disassembly of section .text:
    
    00000000 <xthal_get_ccount>:
       0:   03ea20          rsr.ccount      a2
       3:   f00d            ret.n
       5:   000000          ill



-------------------

SNTP (Simple NTP). Parte de la librería lwIP.

http://www.nongnu.org/lwip

-------------------

Darse de alta. Registrar aplicación para consumir las APIs.

https://openapi.emtmadrid.es/v1/mobilitylabs/user/login/
X-ClientId:
passKey:



curl https://openapi.emtmadrid.es/v1/mobilitylabs/user/login/ -H "X-ClientId: $clientid" -H "passKey: $passkey"

Response:
{
  "code": "01",
  "description": "Token d0abcc6 extend  into control-cache",
  "datetime": "2020-11-12T22:17:39.153133",
  "data": [
    {
      "nameApp": "espEyC",
      "levelApp": 0,
      "updatedAt": "2020-11-12T20:16:46.213000",
      "userName": "Electronicayciencia",
      "lastUpdate": {
        "$date": 1605214293761
      },
      "idUser": "9283BAE",
      "priv": "U",
      "tokenSecExpiration": 86400,
      "email": "@gmail.com",
      "tokenDteExpiration": {
        "$date": 1605304293761
      },
      "flagAdvise": false,
      "accessToken": "d0abcc6",
      "apiCounter": {
        "current": 13,
        "dailyUse": 250000,
        "owner": 0,
        "licenceUse": "Please mention EMT Madrid MobilityLabs as data source. Thank you and enjoy!"
      },
      "username": "Electronicayciencia"
    }
  ]
}



curl https://openapi.emtmadrid.es/v2/transport/busemtmad/stops/2671/arrives/137/ -H "Content-Type: application/json" -H "accessToken: $token" -d '
{
  "cultureInfo":"ES",
  "Text_StopRequired_YN":"N",
  "Text_EstimationsRequired_YN":"Y",
  "Text_IncidencesRequired_YN":"N",
  "DateTime_Referenced_Incidencies_YYYYMMDD":"20201111"
}'

Response:
{
  "code": "00",
  "description": "Data recovered  OK, (lapsed: 102 millsecs)",
  "datetime": "2020-11-12T22:30:28.917327",
  "data": [
    {
      "Arrive": [
        {
          "line": "137",
          "stop": "2671",
          "isHead": "False",
          "destination": "PUERTA HIERRO",
          "deviation": 0,
          "bus": 8861,
          "geometry": {
            "type": "Point",
            "coordinates": [
              -3.6964734264141583,
              40.496700166721325
            ]
          },
          "estimateArrive": 888,
          "DistanceBus": 2775,
          "positionTypeBus": "0"
        },
        {
          "line": "137",
          "stop": "2671",
          "isHead": "False",
          "destination": "PUERTA HIERRO",
          "deviation": 0,
          "bus": 8857,
          "geometry": {
            "type": "Point",
            "coordinates": [
              -3.685911475007972,
              40.48363866031758
            ]
          },
          "estimateArrive": 2269,
          "DistanceBus": 7499,
          "positionTypeBus": "0"
        }
      ],
      "StopInfo": [],
      "ExtraInfo": [],
      "Incident": {}
    }
  ]
}



LCD: 20x4 o 16x2

  1234567890123456
 |----------------|
1|················|
2|················|
 |----------------|

  12345678901234567890
 |--------------------|
1|····················|
2|····················|
3|····················|
4|····················|
 |--------------------|



  1234567890123456
 |----------------|
1|················|
2|················|
 |----------------|

  12345678901234567890
 |--------------------|
1|Bus     Dist  Tiempo|
2|00120   500m  1m 20s|
3|10120  >12km    >15m|
4|Hace 15s      P.1256|
 |--------------------|


De numero de bus:
10000
00120

Representaciones de tiempo:
   60s
    5m
1m 20s
  >15m

De distancia:
 500m
2.5km
>12km

Ultima actualizacion:
Dom 15/11  14:10:32

Bus     Dist  Tiempo
00120   500m  1m 20s
10120  >12km    >15m
Hace 15s      P.1256



--------------------------

LCD. Portar softlcd de wiringpi a esp

El módulo se ilumina, se enciende o se apaga, pero no salen caracteres.

Quito leds por si fuera tensiones en las líneas de I2C.

Depuración con saleae parece todo bien.
Hago que esp escriba comandos de i2cli.
Conecto LCD a raspberry y purebo ejemplo 20x4: funciona.
Lanzo comandos de ESP en raspberry con i2cli: funciona.
Conecto LCD a 3.3v y lanzo ejemplo: no funciona.

El módulo LCD no funciona a 3.3v

En ESP, si pongo el debug funciona, si lo quito salen caracteres raros. problema de delay

Print ABCD función, pero el ejemplo de 4 líneas no. Salen caracters raros.

Aumento retardo en el clear.

Si pongo el clear antes del print ABCD salen caracteres raros.

Si activo el debug en el bucle de I2C, funciona bien. Debe ser por el I2C del ESP.

--------------------------





















































