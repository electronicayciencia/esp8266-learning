/* I2C scan.

The scan is stopped while writing the "device found" message.

*/
#include <stdio.h> // printf
#include "freertos/FreeRTOS.h" // portTICK_PERIOD_MS
#include "freertos/task.h" // vTaskDelay
#include "esp_log.h" // ESP_LOGI

#include "driver/i2c.h"

#define LOG_TAG "i2c"
#define I2C_SCL_IO 0        
#define I2C_SDA_IO 2       
#define I2C_NUM    0

static esp_err_t i2c_init() {
    i2c_config_t conf;
    conf.mode = I2C_MODE_MASTER;
    conf.sda_io_num = I2C_SDA_IO;
    conf.sda_pullup_en = 1;
    conf.scl_io_num = I2C_SCL_IO;
    conf.scl_pullup_en = 1;
    conf.clk_stretch_tick = 100; // what is this for?
    ESP_ERROR_CHECK(i2c_driver_install(I2C_NUM, conf.mode));
    ESP_ERROR_CHECK(i2c_param_config(I2C_NUM, &conf));
    return ESP_OK;
}

/* You need to call STOP command because i2c_master_cmd_begin won't process
   stop command for empty addresses because it does not receive the ACK. */
static esp_err_t i2c_scan() {
	uint8_t addr;
	esp_err_t ret;

	// prepare stand-alone stop command
	i2c_cmd_handle_t stop = i2c_cmd_link_create();
	i2c_master_stop(stop);

	for (addr = 0; addr < 127; addr++) {
    	i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    	i2c_master_start(cmd);
   		i2c_master_write_byte(cmd, addr << 1 | I2C_MASTER_READ, 1);
    	ret = i2c_master_cmd_begin(I2C_NUM, cmd, 2 / portTICK_RATE_MS);
    	i2c_cmd_link_delete(cmd);

    	i2c_master_cmd_begin(I2C_NUM, stop, 0);

		if (ret == ESP_OK) {
			ESP_LOGI(LOG_TAG, "Device found at 0x%02x.", addr);
		}
		//vTaskDelay(10 / portTICK_RATE_MS);
	}

	i2c_cmd_link_delete(stop);
    return ESP_OK;
}


void app_main()
{
	i2c_init();
	ESP_LOGI(LOG_TAG, "Init done");
	i2c_scan();
	ESP_LOGI(LOG_TAG, "Scan done");
	//xTaskCreate(task_flash_led, "flash_led", configMINIMAL_STACK_SIZE, NULL, 5, NULL);
//	ESP_LOGI("main","End. Go to bed.");
}
